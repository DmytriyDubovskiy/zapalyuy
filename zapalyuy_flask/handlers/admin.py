import asyncio
from aiogram import types, F, Bot
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiosqlite
from keyboards import admin_kb, back_to_menu_button
from config import OWNER_ID

# –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_broadcast_message = State()

class AddPsychStates(StatesGroup):
    waiting_for_psych_id = State()

class RemovePsychStates(StatesGroup):
    waiting_for_psych_id = State()

async def admin_panel(message: types.Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.</b>")
        return
    text = (
        "<b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "<code>/add_psych &lt;id&gt;</code> ‚Äî –¥–æ–¥–∞—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n"
        "<code>/remove_psych &lt;id&gt;</code> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n"
        "<code>/broadcast</code> ‚Äî —Ä–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º\n"
        "<code>/cabinet</code> ‚Äî –∫–∞–±—ñ–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏)"
    )
    await message.answer(text, reply_markup=admin_kb())

async def admin_actions(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id != OWNER_ID:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", show_alert=True)
        return

    if call.data == "adm_list":
        async with aiosqlite.connect("bot.db") as db:
            cur = await db.execute("SELECT user_id FROM psychologists ORDER BY user_id")
            ids = [str(r[0]) for r in await cur.fetchall()]
        txt = "<b>üë• –ü—Å–∏—Ö–æ–ª–æ–≥–∏:</b>\n" + ("\n".join(f"‚Ä¢ <code>{i}</code>" for i in ids) if ids else "<i>—Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</i>")
        await call.message.edit_text(txt, reply_markup=admin_kb())
    elif call.data == "adm_feedbacks":
        await show_feedbacks_admin(call)
    elif call.data == "adm_broadcast":
        await call.message.answer(
            "<b>üì¢ –†–æ–∑—Å–∏–ª–∫–∞</b>\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(BroadcastStates.waiting_for_broadcast_message)
        await call.answer()
    elif call.data == "adm_close":
        await call.message.delete()
        await call.answer("–ó–∞–∫—Ä–∏—Ç–æ")

async def show_feedbacks_admin(call: types.CallbackQuery):
    if call.from_user.id != OWNER_ID:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", show_alert=True)
        return

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("""
            SELECT f.comment, f.created, u.first_name, u.username 
            FROM feedback f 
            LEFT JOIN users u ON f.user_id = u.user_id 
            ORDER BY f.created DESC 
            LIMIT 20
        """)
        feedbacks = await cur.fetchall()
    
    if not feedbacks:
        await call.message.answer("üìù –ù–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return
    
    text = "<b>üìù –û—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫–∏:</b>\n\n"
    for comment, created, first_name, username in feedbacks:
        user_info = f"{first_name} (@{username})" if username else first_name
        date = created.split(' ')[0] if created else "–Ω/–¥"
        text += f"üë§ {user_info}\nüìÖ {date}\nüí¨ {comment or '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n\n"
        if len(text) > 3500:  # –û–±–º–µ–∂–µ–Ω–Ω—è Telegram
            text += "..."
            break
    
    await call.message.answer(text)
    await call.answer()

async def add_psychologist(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /add_psych"""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî <b>–õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏.</b>")
        return
    
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("<b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> <code>/add_psych 1234567</code>")
        return
    
    pid = int(parts[1])
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("INSERT OR IGNORE INTO psychologists(user_id) VALUES(?)", (pid,))
        await db.commit()
    
    await message.answer(f"‚úÖ <b>–î–æ–¥–∞–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</b> <code>{pid}</code>.")

async def remove_psychologist(message: types.Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /remove_psych"""
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî <b>–õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏.</b>")
        return
    
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("<b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> <code>/remove_psych 1234567</code>")
        return
    
    pid = int(parts[1])
    async with aiosqlite.connect("bot.db") as db:
        await db.execute("DELETE FROM psychologists WHERE user_id=?", (pid,))
        await db.commit()
    
    await message.answer(f"üóë <b>–í–∏–¥–∞–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞</b> <code>{pid}</code>.")

async def broadcast_command(message: types.Message, state: FSMContext):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî <b>–õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É.</b>")
        return
    
    await message.answer(
        "<b>üì¢ –†–æ–∑—Å–∏–ª–∫–∞</b>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(BroadcastStates.waiting_for_broadcast_message)

async def handle_broadcast_message(message: types.Message, state: FSMContext, bot: Bot):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚õî <b>–õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É.</b>")
        await state.clear()
        return
    
    if message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É":
        await message.answer("‚ùå <b>–†–æ–∑—Å–∏–ª–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    async with aiosqlite.connect("bot.db") as db:
        cursor = await db.execute("SELECT user_id FROM users")
        users = await cursor.fetchall()
    
    total_users = len(users)
    successful = 0
    failed = 0
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
    progress_message = await message.answer(
        f"üì§ <b>–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏...</b>\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"–£—Å–ø—ñ—à–Ω–æ: 0\n"
        f"–ù–µ –≤–¥–∞–ª–æ—Å—è: 0"
    )
    
    # –†–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    for user in users:
        user_id = user[0]
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
            if message.content_type == "text":
                await bot.send_message(
                    user_id, 
                    f"{message.text}"
                )
            elif message.content_type == "photo":
                await bot.send_photo(
                    user_id,
                    message.photo[-1].file_id,
                    caption=f"{message.caption or ''}"
                )
            elif message.content_type == "video":
                await bot.send_video(
                    user_id,
                    message.video.file_id,
                    caption=f"{message.caption or ''}"
                )
            elif message.content_type == "document":
                await bot.send_document(
                    user_id,
                    message.document.file_id,
                    caption=f"{message.caption or ''}"
                )
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ
                await message.send_copy(user_id)
            
            successful += 1
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            if successful % 10 == 0:
                await progress_message.edit_text(
                    f"üì§ <b>–†–æ–∑—Å–∏–ª–∫–∞...</b>\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
                    f"–£—Å–ø—ñ—à–Ω–æ: {successful}\n"
                    f"–ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}"
                )
            
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä
            await asyncio.sleep(0.1)
            
        except Exception as e:
            failed += 1
            # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user_id}: {e}")
    
    # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    await progress_message.edit_text(
        f"‚úÖ <b>–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"‚Ä¢ –£—Å–ø—ñ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {successful}\n"
        f"‚Ä¢ –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—Å—Ç–∞–≤–∏—Ç–∏: {failed}\n"
    )

    await state.clear()