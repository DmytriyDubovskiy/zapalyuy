from aiogram import types
from aiogram.filters import Command
import aiosqlite
from keyboards import back_to_menu_button
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_comment = State()

async def show_feedbacks(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ –º–µ—Ö–∞–Ω—ñ–∫–∏ –≤—ñ–¥–≥—É–∫—ñ–≤"""
    await message.answer(
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –Ω–∞—à –±–æ—Ç –∞–±–æ –ø—Ä–æ—î–∫—Ç –∑–∞–≥–∞–ª–æ–º üòä\n\n"
        "–ü–∏—à–∏ –≤—Å–µ, —â–æ –¥—É–º–∞—î—à ‚Äî —Ö–æ—Ä–æ—à–µ —á–∏ –ø–æ–≥–∞–Ω–µ. –ù—ñ—Ö—Ç–æ –Ω–µ –∑–∞—Å—É–¥–∏—Ç—å!\n"
        "–ë–∞–∂–∞–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å–µ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
        reply_markup=back_to_menu_button()
    )
    await state.set_state(FeedbackState.waiting_for_feedback)

async def handle_feedback_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É"""
    feedback_text = message.text
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É –ë–î
    async with aiosqlite.connect("bot.db") as db:
        await db.execute(
            "INSERT INTO feedback(user_id, comment) VALUES (?, ?)",
            (message.from_user.id, feedback_text)
        )
        await db.commit()
    
    await message.answer(
        "–î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏–¥—ñ–ª–∏–≤/–ø—Ä–∏–¥—ñ–ª–∏–ª–∞ —Å–≤—ñ–π —á–∞—Å üíõ  –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≥–ª—è–Ω–µ–º–æ —Ç–≤–æ—ó –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —ñ –≤—Ä–∞—Ö—É—î–º–æ —ó—Ö. \n\n–ó–∞–ø–∞–ª—é—î–º–æ —Ä–∞–∑–æ–º! üî•",
        reply_markup=back_to_menu_button()
    )
    await state.clear()

async def rate(message: types.Message):
    try:
        parts = message.text.split(maxsplit=2)
        rating = int(parts[1])
        comment = parts[2] if len(parts) > 2 else ""
        async with aiosqlite.connect("bot.db") as db:
            await db.execute(
                "INSERT INTO feedback(user_id, rating, comment) VALUES (?, ?, ?)",
                (message.from_user.id, rating, comment)
            )
            await db.commit()
        await message.answer("<b>–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!</b>")
    except Exception:
        await message.answer("<b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> <code>/rate [1-10] [–∫–æ–º–µ–Ω—Ç–∞—Ä]</code>")
