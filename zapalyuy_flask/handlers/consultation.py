from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import aiosqlite
from keyboards import understood_button, back_to_menu_button, main_menu
from datetime import datetime
from utils import generate_slots
from config import KYIV_TZ
import logging

# –î–æ–¥–∞–π—Ç–µ —Ü—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
user_weekly_consultations = {}
consultation_sessions = {}

async def consultation_menu(message: types.Message, state: FSMContext):
    """–ù–æ–≤–µ –º–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
    current_week = datetime.now().isocalendar()[1]
    if user_id not in user_weekly_consultations:
        user_weekly_consultations[user_id] = {'week': current_week, 'count': 0}
    
    if user_weekly_consultations[user_id]['week'] != current_week:
        user_weekly_consultations[user_id] = {'week': current_week, 'count': 0}
    
    if user_weekly_consultations[user_id]['count'] >= 3:
        await message.answer(
            "‚ö†Ô∏è –¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤/–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (3).\n"
            "–°–ø—Ä–æ–±—É–π –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è!",
            reply_markup=back_to_menu_button()
        )
        return
    
    consultation_text = (
        "–ú–∏ —Ä–∞–¥—ñ, —â–æ —Ç–∏ –ø—ñ–∫–ª—É—î—à—Å—è –ø—Ä–æ —Å–≤–æ—î –º–µ–Ω—Ç–∞–ª—å–Ω–µ —Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–µ –∑–¥–æ—Ä–æ–≤'—è üòò\n\n"
        "<b>–ì—Ä–∞—Ñ—ñ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π:</b>\n\n"
        "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚Äì –°—É–±–æ—Ç–∞\n"
        "10:00 ‚Äì 20:00\n\n"
        "<b>–í–ê–ñ–õ–ò–í–û‚ùóÔ∏è</b>\n\n"
        "–ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n\n"
        "–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± —Ç–∏ –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞–≤—Å—è/–Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª–∞—Å—è —ñ –º–∞–≤/–º–∞–ª–∞ —á–∞—Å –≤—Å–µ –æ–±–¥—É–º–∞—Ç–∏\n\n"
        "<b>–ù–∞–≤—ñ—â–æ —ç—Ç–æ —Ç–æ–±—ñ:</b>\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–∏–º, —â–æ —Ç–µ–±–µ —Ç—É—Ä–±—É—î üëÄ\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ç—Ä–∏–≤–æ–≥–∞, —Å—Ç—Ä–µ—Å, —Å–∫–ª–∞–¥–Ω–æ—â—ñ —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ –∑ –±–∞—Ç—å–∫–∞–º–∏ –∞–±–æ –¥—Ä—É–∑—è–º–∏, –±—É–ª—ñ–Ω–≥ —á–∏ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–Ω—è. "
        "–í—Å–µ, —â–æ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ç–µ–±–µ, –º–æ–∂–Ω–∞ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º —É –±–µ–∑–ø–µ—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ\n\n"
        "<b>–Ø–∫ —ç—Ç–æ –±—É–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏:</b>\n\n"
        "–ü—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ —Ç–∏ –Ω–∞–¥—ñ—à–ª–µ—à —Å–≤—ñ–π –∑–∞–ø–∏—Ç, —Ç–∏ –ø–æ—Ç—Ä–∞–ø–ª—è—î—à —É —á–µ—Ä–≥—É. –ü—Å–∏—Ö–æ–ª–æ–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º 1-2 –¥–Ω—ñ–≤ —É —Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏, "
        "—è–∫—ñ –º–∏ –≤–∫–∞–∑–∞–ª–∏ –≤–∏—â–µ ( –ø–æ—Å—Ç–∞—Ä–∞—î—Ç—å—Å—è —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ, –∞–ª–µ –±—É–¥—å –≥–æ—Ç–æ–≤–∏–π/–≥–æ—Ç–æ–≤–∞, —â–æ —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É )\n\n"
        "–£—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —ñ <b>—Ç—Ä–∏–≤–∞—î –¥–æ –≥–æ–¥–∏–Ω–∏</b>.\n\n"
        "–ü—Ä–æ—Å–∏–º–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É –ª–µ–∫—Å–∏–∫—É —ñ –ø–æ–≤–∞–∂–∞—Ç–∏ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤.\n\n"
        "<b>–ù–µ –ø–µ—Ä–µ–π–º–∞–π—Å—è, –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –º—ñ–∂ —Ç–æ–±–æ—é —ñ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∞ —ñ –Ω—ñ–∫—É–¥–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è ‚ò∫Ô∏èü´∂</b>\n\n"
        "<b>–ó–í–ï–†–ù–ò –£–í–ê–ì–£!üó£</b>\n\n"
        "–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –ø—Å–∏—Ö–æ–ª–æ–≥ –ø—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ —Ä–æ–∑–º–æ–≤–∏, –≤—ñ–Ω –¥–∞—î <b>–ø—Ä–∏–±–ª–∏–∑–Ω–æ 30 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.</b> "
        "–Ø–∫—â–æ —Ç–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏.\n\n"
        "–ü—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–∑–≤–∏—á–∞–π —á–µ–∫–∞—î <b>10‚Äì15 —Ö–≤–∏–ª–∏–Ω –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏</b>, —Ç–æ–º—É —Ä–∞–¥–∏–º–æ –≤–∏–¥—ñ–ª–∏—Ç–∏ —Ü—é –≥–æ–¥–∏–Ω—É, "
        "–Ω–µ –≤—ñ–¥–≤–æ–ª—ñ–∫–∞—Ç–∏—Å—è —ñ –±—É—Ç–∏ –≥–æ—Ç–æ–≤–∏–º/–≥–æ—Ç–æ–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏, —â–æ–± –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –±—É–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–∏—Å–Ω–æ—é\n\n"
        "–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É —ñ —Å—Ç–∞–≤–∞–π —É —á–µ—Ä–≥—É!üëå"
    )
    
    await message.answer(consultation_text, reply_markup=understood_button())
    from main import ConsultationStates
    await state.set_state(ConsultationStates.waiting_for_confirmation)

async def handle_consultation_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ó—Ä–æ–∑—É–º—ñ–ª–æ)":
        # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
        user_id = message.from_user.id
        current_week = datetime.now().isocalendar()[1]
        
        if user_id not in user_weekly_consultations:
            user_weekly_consultations[user_id] = {'week': current_week, 'count': 0}
        
        if user_weekly_consultations[user_id]['week'] != current_week:
            user_weekly_consultations[user_id] = {'week': current_week, 'count': 0}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
        if user_weekly_consultations[user_id]['count'] >= 3:
            await message.answer(
                "‚ö†Ô∏è –¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤/–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å (3).\n"
                "–°–ø—Ä–æ–±—É–π –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è!",
                reply_markup=back_to_menu_button()
            )
            await state.clear()
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏
        await show_available_times(message)
        await state.clear()

async def show_available_times(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó"""
    try:
        slots = generate_slots()
        if not slots:
            await message.answer(
                "–ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                reply_markup=back_to_menu_button()
            )
            return
            
        buttons = []
        row = []
        for i, slot in enumerate(slots, start=1):
            text = slot.astimezone(KYIV_TZ).strftime("%d.%m %H:%M")
            row.append(types.InlineKeyboardButton(text=text, callback_data=f"req_{slot.isoformat()}"))
            if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥–∫—É
                buttons.append(row)
                row = []
        if row:
            buttons.append(row)
        buttons.append([types.InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="req_cancel")])
        kb = types.InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–∑–∞ –ö–∏—î–≤–æ–º):", reply_markup=kb)
        
    except Exception as e:
        logging.error(f"Error in show_available_times: {e}")
        await message.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å—ñ–≤.",
            reply_markup=back_to_menu_button()
        )

async def req_cancel(call: types.CallbackQuery):
    await call.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    await call.answer()

async def create_request(call: types.CallbackQuery):
    user_id = call.from_user.id
    time_iso = call.data.replace("req_", "")
    
    try:
        scheduled_utc = datetime.fromisoformat(time_iso)
    except Exception:
        await call.answer("–ü–æ–º–∏–ª–∫–∞ —É –≤–∏–±–æ—Ä—ñ —á–∞—Å—É", show_alert=True)
        return

    # –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
    current_week = datetime.now().isocalendar()[1]
    if user_id not in user_weekly_consultations:
        user_weekly_consultations[user_id] = {'week': current_week, 'count': 1}
    else:
        user_weekly_consultations[user_id]['count'] += 1

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT COUNT(*) FROM consultations WHERE user_id=? AND scheduled_time=? AND status IN ('request','scheduled','active')",
            (user_id, scheduled_utc.isoformat())
        )
        exists = (await cur.fetchone())[0] > 0
        if exists:
            await call.answer("–£ –≤–∞—Å —É–∂–µ —î –∑–∞—è–≤–∫–∞/–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ —Å–µ—Å—ñ—è –Ω–∞ —Ü–µ–π —á–∞—Å.", show_alert=True)
            return

        await db.execute(
            "INSERT INTO consultations(user_id, psychologist_id, scheduled_time, status) VALUES (?, NULL, ?, 'request')",
            (user_id, scheduled_utc.isoformat())
        )
        await db.commit()

        cur = await db.execute("SELECT user_id FROM psychologists")
        psychs = [row[0] for row in await cur.fetchall()]

    kyiv_txt = scheduled_utc.astimezone(KYIV_TZ).strftime("%d.%m.%Y %H:%M")
    await call.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ <b>{kyiv_txt}</b>.\n–û—á—ñ–∫—É–π—Ç–µ, –ø–æ–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥ –≤—ñ–∑—å–º–µ —ó—ó —É —Ä–æ–±–æ—Ç—É.")

    notify_text = (
        "üÜï <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é!</b>\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {call.from_user.full_name}\n"
        f"User ID: `{user_id}`\n"
        f"–ß–∞—Å (–ö–∏—ó–≤): <b>{kyiv_txt}</b>\n\n"
        "–í—ñ–∑—å–º—ñ—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é —É /cabinet -> ¬´–ó–∞—è–≤–∫–∏¬ª."
    )
    for pid in psychs:
        try:
            await call.bot.send_message(pid, notify_text)
        except Exception as e:
            logging.error(f"Notify psych {pid} failed: {e}")

async def end_consultation(message: types.Message):
    uid = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫ –≤ consultation_sessions, —Ç–∞–∫ —ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if uid not in consultation_sessions:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ sessions, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        async with aiosqlite.connect("bot.db") as db:
            cur = await db.execute(
                "SELECT id FROM consultations WHERE (user_id=? OR psychologist_id=?) AND status='active'",
                (uid, uid)
            )
            consultation = await cur.fetchone()
            
            if not consultation:
                await message.answer("‚ùå <b>–í–∏ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó.</b>")
                return
            else:
                # –Ø–∫—â–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, –∞–ª–µ –Ω–µ –≤ sessions, –¥–æ–¥–∞—î–º–æ —ó—ó
                consultation_id = consultation[0]
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ peer (–∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞)
                cur = await db.execute(
                    "SELECT user_id, psychologist_id FROM consultations WHERE id=?",
                    (consultation_id,)
                )
                cons_data = await cur.fetchone()
                user_id, psychologist_id = cons_data
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Ö—Ç–æ —î —Ö—Ç–æ
                if uid == user_id:
                    consultation_sessions[uid] = psychologist_id
                    if psychologist_id:
                        consultation_sessions[psychologist_id] = uid
                else:
                    consultation_sessions[uid] = user_id
                    consultation_sessions[user_id] = uid
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —Ö—Ç–æ –∑–∞–≤–µ—Ä—à—É—î
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT id, user_id, psychologist_id FROM consultations WHERE (user_id=? OR psychologist_id=?) AND status='active'",
            (uid, uid)
        )
        consultation = await cur.fetchone()
        if not consultation:
            await message.answer("‚ùå <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>")
            return
            
        consultation_id, user_id, psychologist_id = consultation
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        await db.execute(
            "UPDATE consultations SET status='completed' WHERE id=?",
            (consultation_id,)
        )
        await db.commit()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑ —Å–µ—Å—ñ–π
    peer = consultation_sessions.get(uid)
    consultation_sessions.pop(uid, None)
    if peer:
        consultation_sessions.pop(peer, None)
    
    # –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –∫–ª—ñ—î–Ω—Ç –∑–∞–≤–µ—Ä—à—É—î)
    if uid == user_id:  # –Ø–∫—â–æ –∑–∞–≤–µ—Ä—à—É—î –∫–ª—ñ—î–Ω—Ç
        await ask_for_feedback(uid, consultation_id, message.bot)
    
    await message.answer("‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ.</b>")
    try:
        await message.bot.send_message(peer, "‚ö†Ô∏è <b>–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ.</b>")
    except:
        pass