import asyncio
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram import BaseMiddleware
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from typing import Callable, Dict, Any, Awaitable, Union
from datetime import datetime, timezone

from config import API_TOKEN, OWNER_ID
from database import init_db, add_psychologist_to_db, remove_psychologist_from_db
from keyboards import main_menu, back_to_menu_button, rating_keyboard, age_verification_keyboard
from utils import is_psychologist, generate_slots, KYIV_TZ
from handlers.start import cmd_start, handle_age_verification
from handlers.menu import show_hotlines, calm_exercises, distract_exercises, library, community_chat
from handlers.feedback import show_feedbacks, handle_feedback_message, rate, FeedbackState
from handlers.consultation import consultation_menu, req_cancel, create_request, end_consultation, handle_consultation_confirmation
from handlers.cabinet import cabinet, cabinet_actions, take_request, join_active, show_requests, show_scheduled_for_psych, show_active_for_psych, show_completed_for_psych
from handlers.admin import (
    admin_panel, admin_actions, add_psychologist, remove_psychologist, 
    broadcast_command, handle_broadcast_message, BroadcastStates,
)
from handlers.exercises import handle_exercises_callback
from background import keep_alive

# Global variables
user_games = {}
feedback_states: dict[int, dict] = {}  # user_id: {consultation_id: int, rating: int}
sent_reminders = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
consultation_sessions = {}  # –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è —Å–µ—Å—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π

bot_start_time = datetime.now(timezone.utc)

# Setup logging
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class AddPsychStates(StatesGroup):
    waiting_for_psych_id = State()

class RemovePsychStates(StatesGroup):
    waiting_for_psych_id = State()

# –î–æ–¥–∞—Ç–∏ –∫–ª–∞—Å —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
class ConsultationStates(StatesGroup):
    waiting_for_confirmation = State()

# Register handlers
dp.message.register(cmd_start, CommandStart())
dp.message.register(handle_age_verification, F.text.in_(["–ü–æ—ó—Ö–∞–ª–∏ üöÄ"]) | F.text.regexp(r'^\d+$'))

# Menu handlers
dp.message.register(calm_exercises, F.text == "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è")
dp.message.register(distract_exercises, F.text == "–í–ø—Ä–∞–≤–∏")
dp.message.register(show_feedbacks, F.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫")
dp.message.register(show_hotlines, F.text == "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞")

# Consultation handlers
dp.message.register(end_consultation, Command("end"))
dp.message.register(consultation_menu, F.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è")
dp.message.register(handle_consultation_confirmation, F.text == "–ó—Ä–æ–∑—É–º—ñ–ª–æ)", ConsultationStates.waiting_for_confirmation)
dp.callback_query.register(req_cancel, F.data == "req_cancel")
dp.callback_query.register(create_request, F.data.startswith("req_"))
dp.message(Command("end"))

# Cabinet handlers
dp.message.register(cabinet, Command("cabinet"))
dp.callback_query.register(cabinet_actions, F.data.startswith("cab_"))
dp.callback_query.register(take_request, F.data.startswith("take_"))
dp.callback_query.register(join_active, F.data.startswith("join_"))

# Admin handlers
dp.message.register(admin_panel, Command("admin"))
dp.callback_query.register(admin_actions, F.data.startswith("adm_"))
dp.message.register(add_psychologist, Command("add_psych"))
dp.message.register(remove_psychologist, Command("remove_psych"))
dp.message.register(broadcast_command, Command("broadcast"))
dp.message.register(handle_broadcast_message, BroadcastStates.waiting_for_broadcast_message)
dp.message.register(add_psychologist, AddPsychStates.waiting_for_psych_id)
dp.message.register(remove_psychologist, RemovePsychStates.waiting_for_psych_id)

# Feedback handler
dp.message.register(show_feedbacks, F.text == "–ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫")
dp.message.register(handle_feedback_message, FeedbackState.waiting_for_feedback)
dp.message.register(rate, Command("rate"))

# Exercise callbacks
dp.callback_query.register(handle_exercises_callback, F.data.in_([
    "dis_game", "dis_exercises", "dis_links", "back_to_exercises",
    "ex_lemon", "ex_balloon", "ex_square_breath", "ex_movement"
]))

# Feedback handlers
@dp.callback_query(F.data.startswith("rate_"))
async def handle_rating(call: types.CallbackQuery, state: FSMContext):
    rating = int(call.data.split("_")[1])
    await state.update_data(rating=rating)
    
    await call.message.answer(
        f"–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É {rating}/10! –ë–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä? "
        "(–ù–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏)",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(FeedbackState.waiting_for_comment)
    await call.answer()

dp.message.register(handle_feedback_message, FeedbackState.waiting_for_feedback)
async def handle_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rating = data.get('rating')
    consultation_id = data.get('consultation_id')
    
    comment = message.text if message.text != "/skip" else ""
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–≥—É–∫
    async with aiosqlite.connect("bot.db") as db:
        await db.execute(
            "INSERT INTO feedback(user_id, rating, comment) VALUES (?, ?, ?)",
            (message.from_user.id, rating, comment)
        )
        await db.commit()
    
    await state.clear()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    async with aiosqlite.connect("bot.db") as db:
        cursor = await db.execute(
            "SELECT age_verified FROM users WHERE user_id = ?", 
            (message.from_user.id,)
        )
        user_data = await cursor.fetchone()
        show_consultation = user_data and user_data[0] and user_data[0] >= 14
    
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! üíô", reply_markup=main_menu(show_consultation))

class MessageTimeMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[
        [Union[types.Message, types.CallbackQuery], Dict[str, Any]],
                       Awaitable[Any]], event: Union[types.Message, types.CallbackQuery],
                       data: Dict[str, Any]) -> Any:
        event_date = None

        if isinstance(event, types.Message):
            event_date = event.date
        elif isinstance(event, types.CallbackQuery) and event.message:
            event_date = event.message.date

        if event_date and event_date < bot_start_time:
            logging.info(
                f"Ignoring message from {event.from_user.id} sent before bot start"
            )
            return

        return await handler(event, data)

dp.message.middleware(MessageTimeMiddleware())
dp.callback_query.middleware(MessageTimeMiddleware())

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    if uid in user_games:
        del user_games[uid]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    async with aiosqlite.connect("bot.db") as db:
        cursor = await db.execute(
            "SELECT age_verified FROM users WHERE user_id = ?", 
            (uid,)
        )
        user_data = await cursor.fetchone()
        show_consultation = user_data and user_data[0] and user_data[0] >= 14
    
    await call.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_menu(show_consultation))
    await call.answer()

# Message handler
@dp.message()
async def all_messages_router(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –≤—ñ–¥–≥—É–∫—É
    current_state = await state.get_state()
    if current_state == FeedbackState.waiting_for_comment.state:
        return
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é - –ü–ï–†–ï–ú–Ü–°–¢–ò–¢–ò –¶–Æ –ü–ï–†–ï–í–Ü–†–ö–£ –í–ì–û–†–£!
    if message.text == "/menu" or message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        if user_id in user_games:
            del user_games[user_id]
        if user_id in feedback_states:
            del feedback_states[user_id]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        async with aiosqlite.connect("bot.db") as db:
            cursor = await db.execute(
                "SELECT age_verified FROM users WHERE user_id = ?", 
                (user_id,)
            )
            user_data = await cursor.fetchone()
            show_consultation = user_data and user_data[0] and user_data[0] >= 14
        
        await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:", reply_markup=main_menu(show_consultation))
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –≤–∂–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    special_commands = ["–ó—Ä–æ–∑—É–º—ñ–ª–æ)", "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è", "–í–ø—Ä–∞–≤–∏", "–ù–∞–ø–∏—Å–∞—Ç–∏ –≤—ñ–¥–≥—É–∫", 
                       "–¢–µ—Ä–º—ñ–Ω–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è"]
    if message.text in special_commands:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    if current_state == ConsultationStates.waiting_for_confirmation.state:
        # –Ø–∫—â–æ —Ü–µ –Ω–µ "–ó—Ä–æ–∑—É–º—ñ–ª–æ", –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
        if message.text != "–ó—Ä–æ–∑—É–º—ñ–ª–æ)":
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó—Ä–æ–∑—É–º—ñ–ª–æ)' –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è")
        return
    
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —é–∑–µ—Ä–∞ –¥–ª—è —ñ–º–µ–Ω—ñ
    try:
        async with aiosqlite.connect("bot.db") as db:
            await db.execute(
                "INSERT OR REPLACE INTO users (user_id, first_name, last_name, username) VALUES (?, ?, ?, ?)",
                (user_id, message.from_user.first_name, message.from_user.last_name, message.from_user.username)
            )
            await db.commit()
    except Exception as e:
        logging.error(f"Error saving user: {e}")

    # –Ø–∫—â–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É –º—ñ—Å—Ç–∫—É ‚Äî –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
    if user_id in consultation_sessions:
        peer = consultation_sessions.get(user_id)
        if peer:
            try:
                if message.content_type == "text":
                    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤
                    await bot.send_message(peer, message.text)
                elif message.content_type == "photo":
                    photo = message.photo[-1].file_id
                    await bot.send_photo(peer, photo, caption=message.caption or "")
                elif message.content_type == "voice":
                    await bot.send_voice(peer, message.voice.file_id)
                elif message.content_type == "document":
                    await bot.send_document(peer, message.document.file_id, caption=message.caption or "")
                else:
                    await bot.send_message(user_id, "‚ö†Ô∏è –¶–µ–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.")
            except Exception as e:
                logging.error(f"Bridge send failed: {e}")
            return

    # –ù–µ –≤ –º—ñ—Å—Ç–∫—É ‚Äî –ø—Ä–æ—Å—Ç–µ –º–µ–Ω—é
    if message.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞ —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞":
        await message.answer(
            "–ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏: –∞–Ω–æ–Ω—ñ–º–Ω—ñ—Å—Ç—å, –ø–æ–≤–∞–≥–∞, –±–µ–∑–ø–µ–∫–∞.\n\n"
            "–©–æ–± –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é, –æ–±–µ—Ä—ñ—Ç—å ¬´–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è¬ª.",
            reply_markup=main_menu(True)
        )
    else:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—ñ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        async with aiosqlite.connect("bot.db") as db:
            cursor = await db.execute(
                "SELECT age_verified FROM users WHERE user_id = ?", 
                (user_id,)
            )
            user_data = await cursor.fetchone()
            show_consultation = user_data and user_data[0] and user_data[0] >= 14
        
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=main_menu(show_consultation))

async def is_psychologist(user_id: int) -> bool:
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT 1 FROM psychologists WHERE user_id=?", (user_id,))
        return (await cur.fetchone()) is not None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
async def ask_for_feedback(user_id: int, consultation_id: int, bot):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ –ø—ñ—Å–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤)"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–ª—ñ—î–Ω—Ç (–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥)
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT 1 FROM psychologists WHERE user_id=?", (user_id,))
        is_psych = await cur.fetchone()
        
        # –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥—ñ–π—Å–Ω–æ –±—É–≤ –∫–ª—ñ—î–Ω—Ç–æ–º —É —Ü—ñ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
        cur = await db.execute("SELECT user_id FROM consultations WHERE id=?", (consultation_id,))
        consultation = await cur.fetchone()
    
    if is_psych or not consultation or consultation[0] != user_id:
        return  # –ù–µ –∑–∞–ø–∏—Ç—É—î–º–æ –≤—ñ–¥–≥—É–∫ —É –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤ –∞–±–æ —è–∫—â–æ —Ü–µ –Ω–µ –∫–ª—ñ—î–Ω—Ç
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —É –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Å–ª–æ–≤–Ω–∏–∫—É
    feedback_states[user_id] = {"consultation_id": consultation_id}
    
    await bot.send_message(
        user_id,
        "üìù <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –ø—Ä–æ–≤–µ–¥–µ–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:</b>",
        reply_markup=rating_keyboard()
    )

async def cleanup_old_reminders():
    """–û—á–∏—Å—Ç–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π"""
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT id FROM consultations WHERE status='completed'")
        completed_ids = [f"reminder_{row[0]}" for row in await cur.fetchall()]
        
        # –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π
        for reminder_id in completed_ids:
            if reminder_id in sent_reminders:
                sent_reminders.remove(reminder_id)

# Background checker
async def background_checker():
    from config import SESSION_DURATION_MIN, CHECK_EVERY_SEC
    
    while True:
        try:
            now_utc = datetime.now(timezone.utc)
            async with aiosqlite.connect("bot.db") as db:
                # Reminder logic
                cur = await db.execute(
                    "SELECT id, user_id, psychologist_id, scheduled_time FROM consultations "
                    "WHERE status='scheduled'"
                )
                for cid, uid, pid, tiso in await cur.fetchall():
                    t = datetime.fromisoformat(tiso).replace(tzinfo=timezone.utc)
                    diff = (t - now_utc).total_seconds()
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
                    reminder_id = f"reminder_{cid}"
                    
                    if 3500 <= diff <= 3700 and reminder_id not in sent_reminders:
                        kyiv = t.astimezone(KYIV_TZ).strftime("%d.%m %H:%M")
                        try:
                            await bot.send_message(uid, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –æ *{kyiv}* (—á–µ—Ä–µ–∑ ~1 –≥–æ–¥).")
                        except Exception as e:
                            logging.error(f"Notify user reminder failed: {e}")
                        try:
                            await bot.send_message(pid, f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: —Å–µ—Å—ñ—è –∑ `{uid}` –æ *{kyiv}* (—á–µ—Ä–µ–∑ ~1 –≥–æ–¥).")
                        except Exception as e:
                            logging.error(f"Notify psych reminder failed: {e}")
                        
                        # –î–æ–¥–∞—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–æ –º–Ω–æ–∂–∏–Ω–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
                        sent_reminders.add(reminder_id)

                # Activate sessions
                cur = await db.execute(
                    "SELECT id, user_id, psychologist_id, scheduled_time FROM consultations "
                    "WHERE status='scheduled'"
                )
                for cid, uid, pid, tiso in await cur.fetchall():
                    t = datetime.fromisoformat(tiso).replace(tzinfo=timezone.utc)
                    if 0 <= (now_utc - t).total_seconds() <= 300:
                        await db.execute("UPDATE consultations SET status='active' WHERE id=?", (cid,))
                        await db.commit()
                        consultation_sessions[uid] = pid
                        consultation_sessions[pid] = uid
                        kyiv = t.astimezone(KYIV_TZ).strftime("%H:%M")
                        try:
                            await bot.send_message(uid, f"üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è –æ {kyiv}. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É.")
                        except Exception as e:
                            logging.error(f"Notify user start failed: {e}")
                        try:
                            await bot.send_message(pid, f"üí¨ –ü–æ—á–∞–ª–∞—Å—è —Å–µ—Å—ñ—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º `{uid}` –æ {kyiv}.")
                        except Exception as e:
                            logging.error(f"Notify psych start failed: {e}")

                # Complete sessions
                cur = await db.execute(
                    "SELECT id, user_id, psychologist_id, scheduled_time FROM consultations "
                    "WHERE status='active'"
                )
                for cid, uid, pid, tiso in await cur.fetchall():
                    t = datetime.fromisoformat(tiso).replace(tzinfo=timezone.utc)
                    if (now_utc - t).total_seconds() >= SESSION_DURATION_MIN * 60:
                        await db.execute("UPDATE consultations SET status='completed' WHERE id=?", (cid,))
                        await db.commit()
                        consultation_sessions.pop(uid, None)
                        consultation_sessions.pop(pid, None)
                        
                        # –í–∏–¥–∞–ª—è—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
                        reminder_id = f"reminder_{cid}"
                        if reminder_id in sent_reminders:
                            sent_reminders.remove(reminder_id)
                        
                        # –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –≤—ñ–¥–≥—É–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –∫–ª—ñ—î–Ω—Ç)
                        await ask_for_feedback(uid, cid, bot)
                        
                        try:
                            await bot.send_message(uid, "‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ!</b>")
                        except Exception as e:
                            logging.error(f"Notify user end failed: {e}")
                        try:
                            await bot.send_message(pid, "‚úÖ <b>–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>")
                        except Exception as e:
                            logging.error(f"Notify psych end failed: {e}")

        except Exception as e:
            logging.error(f"background_checker error: {e}")

        await asyncio.sleep(CHECK_EVERY_SEC)

# Main function
async def main():
    keep_alive()
    await init_db()
    await cleanup_old_reminders()
    asyncio.create_task(background_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())