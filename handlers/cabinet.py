from aiogram import types, F
import aiosqlite
import logging
from datetime import datetime
from keyboards import cabinet_kb
from utils import KYIV_TZ

async def cabinet(message: types.Message):
    uid = message.from_user.id
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT 1 FROM psychologists WHERE user_id=?", (uid,))
        ok = await cur.fetchone()
    if not ok:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤.")
        return
    await message.answer("üë©‚Äç‚öïÔ∏è <b>–ö–∞–±—ñ–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞</b>", reply_markup=cabinet_kb())

async def cabinet_actions(call: types.CallbackQuery):
    uid = call.from_user.id
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT 1 FROM psychologists WHERE user_id=?", (uid,))
        ok = await cur.fetchone()
    if not ok:
        await call.answer("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥—ñ–≤.", show_alert=True)
        return

    action = call.data
    if action == "cab_refresh":
        await call.message.edit_text("üë©‚Äç‚öïÔ∏è <b>–ö–∞–±—ñ–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞</b>", reply_markup=cabinet_kb())
        await call.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")
        return

    if action == "cab_requests":
        await show_requests(call)
    elif action == "cab_scheduled":
        await show_scheduled_for_psych(call, uid)
    elif action == "cab_active":
        await show_active_for_psych(call, uid)
    elif action == "cab_completed":
        await show_completed_for_psych(call, uid)

async def show_requests(call: types.CallbackQuery):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT c.id, c.user_id, c.scheduled_time, u.first_name, u.last_name "
            "FROM consultations c LEFT JOIN users u ON u.user_id=c.user_id "
            "WHERE c.status='request' ORDER BY c.scheduled_time"
        )
        rows = await cur.fetchall()

    if not rows:
        await call.message.edit_text("üìù –ó–∞—è–≤–æ–∫ –Ω–µ–º–∞—î.", reply_markup=cabinet_kb())
        return

    text = "üìù <b>–ó–∞—è–≤–∫–∏:</b>\n\n"
    buttons = []
    for cid, uid, tiso, fn, ln in rows:
        kyiv = datetime.fromisoformat(tiso).astimezone(KYIV_TZ).strftime("%d.%m %H:%M")
        name = f"{fn or ''} {ln or ''}".strip() or f"User {uid}"
        text += f"‚Ä¢ {kyiv} ‚Äî {name} (`{uid}`)\n"
        buttons.append([types.InlineKeyboardButton(text=f"–í–∑—è—Ç–∏ #{cid}", callback_data=f"take_{cid}")])
    buttons.append([types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cab_refresh")])
    await call.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))

async def take_request(call: types.CallbackQuery):
    psych_id = call.from_user.id
    cid = int(call.data.replace("take_", ""))

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute("SELECT user_id, scheduled_time, status FROM consultations WHERE id=?", (cid,))
        row = await cur.fetchone()
        if not row:
            await call.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return
        user_id, tiso, status = row
        if status != "request":
            await call.answer("–¶—é –∑–∞—è–≤–∫—É –≤–∂–µ –≤–∑—è—Ç–æ.", show_alert=True)
            return

        await db.execute(
            "UPDATE consultations SET psychologist_id=?, status='scheduled' WHERE id=?",
            (psych_id, cid)
        )
        await db.commit()

    kyiv_txt = datetime.fromisoformat(tiso).astimezone(KYIV_TZ).strftime("%d.%m.%Y %H:%M")
    await call.answer("–í–∏ –≤–∑—è–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.")
    await call.message.edit_text("‚úÖ –ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ¬´–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ¬ª.", reply_markup=cabinet_kb())

    try:
        await call.bot.send_message(user_id, f"‚úÖ –í–∞—à—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞ <b>{kyiv_txt}</b> –≤–∑—è–≤ –ø—Å–∏—Ö–æ–ª–æ–≥. –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
    except Exception as e:
        logging.error(f"Notify user fail: {e}")
    try:
        await call.bot.send_message(psych_id, f"üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é #{cid} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ <b>{kyiv_txt}</b>. –ö–ª—ñ—î–Ω—Ç: `{user_id}`")
    except Exception as e:
        logging.error(f"Notify psych fail: {e}")

async def show_scheduled_for_psych(call: types.CallbackQuery, psych_id: int):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT id, user_id, scheduled_time FROM consultations "
            "WHERE status='scheduled' AND psychologist_id=? ORDER BY scheduled_time",
            (psych_id,)
        )
        rows = await cur.fetchall()

    if not rows:
        await call.message.edit_text("üìÖ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö.", reply_markup=cabinet_kb())
        return

    text = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ:</b>\n\n"
    for cid, uid, tiso in rows:
        kyiv = datetime.fromisoformat(tiso).astimezone(KYIV_TZ).strftime("%d.%m %H:%M")
        text += f"‚Ä¢ {kyiv} ‚Äî user `{uid}` (#{cid})\n"
    await call.message.edit_text(text, reply_markup=cabinet_kb())

async def show_active_for_psych(call: types.CallbackQuery, psych_id: int):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT id, user_id, scheduled_time FROM consultations "
            "WHERE status='active' AND psychologist_id=? ORDER BY scheduled_time DESC",
            (psych_id,)
        )
        rows = await cur.fetchall()

    if not rows:
        await call.message.edit_text("üî¥ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö.", reply_markup=cabinet_kb())
        return

    text = "üî¥ <b>–ê–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó:</b>\n\n"
    buttons = []
    for cid, uid, tiso in rows:
        kyiv = datetime.fromisoformat(tiso).astimezone(KYIV_TZ).strftime("%H:%M")
        text += f"‚Ä¢ user `{uid}` (–ø–æ—á–∞—Ç–æ–∫ {kyiv})  #{cid}\n"
        buttons.append([types.InlineKeyboardButton(text=f"üí¨ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ #{cid}", callback_data=f"join_{cid}")])
    buttons.append([types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="cab_refresh")])
    await call.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))

async def join_active(call: types.CallbackQuery):
    psych_id = call.from_user.id
    cid = int(call.data.replace("join_", ""))

    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT user_id, psychologist_id, status FROM consultations WHERE id=?",
            (cid,)
        )
        row = await cur.fetchone()
    if not row:
        await call.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user_id, p_id, status = row
    if status != "active" or p_id != psych_id:
        await call.answer("–°–µ—Å—ñ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –Ω–µ –≤–∞—à–∞.", show_alert=True)
        return

    from handlers.consultation import consultation_sessions
    consultation_sessions[user_id] = psych_id
    consultation_sessions[psych_id] = user_id

    await call.answer("–ü—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ —á–∞—Ç—É.")
    await call.message.answer(f"–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —á–∞—Ç—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º `{user_id}`.")
    try:
        await call.bot.send_message(user_id, "üë®‚Äç‚öïÔ∏è –ü—Å–∏—Ö–æ–ª–æ–≥ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —á–∞—Ç—É. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏. –î–ª—è –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /end")
    except Exception as e:
        logging.error(f"Notify client fail: {e}")

async def show_completed_for_psych(call: types.CallbackQuery, psych_id: int):
    async with aiosqlite.connect("bot.db") as db:
        cur = await db.execute(
            "SELECT id, user_id, scheduled_time FROM consultations "
            "WHERE status='completed' AND psychologist_id=? ORDER BY scheduled_time DESC LIMIT 15",
            (psych_id,)
        )
        rows = await cur.fetchall()

    if not rows:
        await call.message.edit_text("‚úÖ –©–µ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö.", reply_markup=cabinet_kb())
        return

    text = "‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ 15):</b>\n\n"
    for cid, uid, tiso in rows:
        kyiv = datetime.fromisoformat(tiso).astimezone(KYIV_TZ).strftime("%d.%m %H:%M")
        text += f"‚Ä¢ {kyiv} ‚Äî user `{uid}` (#{cid})\n"
    await call.message.edit_text(text, reply_markup=cabinet_kb())